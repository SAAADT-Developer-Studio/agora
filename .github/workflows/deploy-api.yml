name: Build and Deploy Rest API

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - api/**
      - "!api/**/*.md"

env:
  DOCKER_IMAGE_NAME: vidik-api
  AWS_REGION: eu-central-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image to ECR
        id: docker_build
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.DOCKER_IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: api
          push: true
          platforms: linux/amd64
          provenance: false
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output Image Details
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.DOCKER_IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Image pushed successfully!"
          echo "Image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Latest: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update Lambda function with new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.DOCKER_IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update the Lambda function with the new Docker image
          aws lambda update-function-code \
            --function-name vidik-api \
            --image-uri ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

          # Wait for the update to complete
          aws lambda wait function-updated \
            --function-name vidik-api

          # Update environment variables if needed
          aws lambda update-function-configuration \
            --function-name vidik-api \
            --environment Variables="{DATABASE_URL=${{ secrets.DATABASE_URL }}}"

      - name: Test Lambda function
        run: |
          # Get the function URL
          FUNCTION_URL=$(aws lambda get-function-url-config --function-name vidik-api --query 'FunctionUrl' --output text)
          echo "Testing Lambda function at: $FUNCTION_URL"

          # Test the health endpoint
          curl -f "$FUNCTION_URL/health" || exit 1
          echo "Lambda function is healthy!"
